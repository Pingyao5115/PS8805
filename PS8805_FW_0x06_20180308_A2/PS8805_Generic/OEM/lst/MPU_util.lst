C51 COMPILER V8.02   MPU_UTIL                                                              03/15/2018 17:16:30 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE MPU_UTIL
OBJECT MODULE PLACED IN .\OEM\Obj\MPU_util.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MPU\DP8051XP\sources\MPU_util.c OMF2 BROWSE VARBANKING DEBUG PRINT(.\OEM\ls
                    -t\MPU_util.lst) OBJECT(.\OEM\Obj\MPU_util.obj)

line level    source

   1          #include <intrins.h>
   2          #include <myDP8051XP.H>
   3          //#include <string.h>
   4          //#include "mpu_serial.h"
   5          #include "global.h"
   6          //#include <absacc.h>
   7          #include "registers_map.h"
   8          //#include "MPU_command.h"
   9          //#include "MPU_SPIFunction.h"
  10          #include "MPU_Functions.h"
  11          //#include "cl_Functions.h"
  12          
  13          t_INTMASK code s_cIntMask0[] = 
  14          {
  15                  { 0x02, 0x9c, 0xff },
  16                  { 0x02, 0xe6, 0xff },
  17                  { 0x02, 0xd8, 0x05 },
  18                  { 0x02, 0x41, 0x05 },
  19          
  20                  { 0xff, 0xff, 0xff },           // last
  21          };
  22          
  23          t_INTMASK code s_cIntMask1[] = 
  24          {
  25                  { 0xff, 0xff, 0xff },           // last
  26          };
  27          
  28          //extern MPU_COMM_STATUS MPU_SendSerialPtr(char code * messageptr, unsigned char size);
  29          
  30          
  31          void MPU_SetINTMask0(void)
  32          {
  33   1              unsigned char idata uciIndex = 0;
  34   1      
  35   1              while ( s_cIntMask0[uciIndex].ucPage != 0xff )
  36   1              {
  37   2                      g_vucxReg[ s_cIntMask0[uciIndex].ucPage * 256 + s_cIntMask0[uciIndex].ucOffset ] |= 
  38   2                         s_cIntMask0[uciIndex].ucValue;
  39   2                      
  40   2                      uciIndex++;
  41   2              }
  42   1      }
  43          /*
  44          void MPU_ClearINTMask0(void)
  45          {
  46                  unsigned char idata uciIndex = 0;
  47          
  48                  while ( s_cIntMask0[uciIndex].ucPage != 0xff )
  49                  {
  50                          g_vucxReg[ s_cIntMask0[uciIndex].ucPage * 256 + s_cIntMask0[uciIndex].ucOffset ] &= 
  51                             ~s_cIntMask0[uciIndex].ucValue;
  52                          
  53                          uciIndex++;
  54                  }
C51 COMPILER V8.02   MPU_UTIL                                                              03/15/2018 17:16:30 PAGE 2   

  55          } */
  56          
  57          void MPU_SetINTMask1(void)
  58          {
  59   1              unsigned char idata uciIndex = 0;
  60   1      
  61   1              while ( s_cIntMask1[uciIndex].ucPage != 0xff )
  62   1              {
  63   2                      g_vucxReg[ s_cIntMask1[uciIndex].ucPage * 256 + s_cIntMask1[uciIndex].ucOffset ] |= 
  64   2                         s_cIntMask1[uciIndex].ucValue;
  65   2                      
  66   2                      uciIndex++;
  67   2              }
  68   1      }
  69          /*
  70          void MPU_ClearINTMask1(void)
  71          {
  72                  unsigned char idata uciIndex = 0;
  73          
  74                  while ( s_cIntMask1[uciIndex].ucPage != 0xff )
  75                  {
  76                          g_vucxReg[ s_cIntMask1[uciIndex].ucPage * 256 + s_cIntMask1[uciIndex].ucOffset ] &= 
  77                             ~s_cIntMask1[uciIndex].ucValue;
  78                          
  79                          uciIndex++;
  80                  }
  81          }*/
  82          
  83          void MPU_EnableINT0( void )
  84          {
  85   1      //      CTLIRQ_CTL = 0xF3;//enable [3]WAIT_IRQ_MASK & [2]READ_WAIT_IRQ
  86   1      }
  87          
  88          void MPU_EnableINT1( void )
  89          {
  90   1      //      ALERT_MASK_LOW  = 0x00; //0b: Interrupt masked,1b: Interrupt unmasked
  91   1      //      ALERT_MASK_HIGH = 0x00; 
  92   1      
  93   1      }
  94          
  95          
  96          /*****************************************************************************/
  97          /* Function Name:               MPU_DisableINT
  98          /* Description:                 disable INT request to protect shared global variables
  99          /* Input parameter:             none
 100          /* Output parameter:    None
 101          /* revision history:    
 102          /*
 103          /*
 104          /*****************************************************************************/
 105          void MPU_DisableINT(void)
 106          {
 107   1              EA = 0;
 108   1              ES = 0;
 109   1              ET1 = 0;
 110   1              EX0 = 0;
 111   1              EX1 = 0;
 112   1          ET0 = 0;
 113   1      }
 114          
 115          /*
 116          void MPU_OpenTimer0INT(void)
C51 COMPILER V8.02   MPU_UTIL                                                              03/15/2018 17:16:30 PAGE 3   

 117          {
 118                  EA = 1;
 119                  ES = 0;
 120                  ET1 = 0;
 121                  EX0 = 0;
 122                  EX1 = 0;
 123              ET0 = 1;
 124          }
 125          */
 126          /*****************************************************************************/
 127          /* Function Name:               MPU_EnableINT
 128          /* Description:                 enable INT request after shared global variables processed
 129          /* Input parameter:             none
 130          /* Output parameter:    None
 131          /* revision history:    
 132          /*
 133          /*
 134          /*****************************************************************************/
 135          void MPU_EnableINT(void)
 136          {
 137   1              ET1 = 0;
 138   1          ET0 = 0;
 139   1      //    ES = 1;
 140   1              EX0 = 1;
 141   1              EX1 = 1;
 142   1          EA = 1;
 143   1      }
 144          
 145          /**************************************************************************************************/
 146          /*      Function Name:          MPU_SetVerNum
 147          /*      Description:            set version number shown in debug utility by I2C
 148          /* Input parameter:             none
 149          /* Output parameter:    None
 150          /* revision history:    
 151          /*
 152          /*
 153          /*****************************************************************************/
 154          void MPU_SetVerNum( unsigned char ucOEM, unsigned char ucMajor, unsigned char ucMiddle, unsigned char ucMi
             -nor )
 155          {
 156   1              ucOEM = ucOEM;
 157   1      //      FW_VER_MAJOR    = ucMajor; 
 158   1      //      FW_VER_MIDDLE   = ucMiddle;
 159   1      //      FW_VER_MINOR    = ucMinor;
 160   1              g_vucxVersion   = OEM_PARADE_VERSION_NUM;
 161   1              g_vucxProjectID = PROJECT_ID;
 162   1      }
*** WARNING C280 IN LINE 154 OF MPU\DP8051XP\SOURCES\MPU_UTIL.C: 'ucMajor': unreferenced local variable
*** WARNING C280 IN LINE 154 OF MPU\DP8051XP\SOURCES\MPU_UTIL.C: 'ucMiddle': unreferenced local variable
*** WARNING C280 IN LINE 154 OF MPU\DP8051XP\SOURCES\MPU_UTIL.C: 'ucMinor': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----       2
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V8.02   MPU_UTIL                                                              03/15/2018 17:16:30 PAGE 4   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
